%%% This file has been annotated. All annotations begin with %%%

%%% Nathan Quirk
%%% ML Project 
%%% Submitted 12.11.18
%%% Illustrative runs of Binary Tree
%%%     Traversals and Displays


Standard ML of New Jersey v110.78 [built: Thu Jul 23 11:21:58 2015]
- use "mlProject.sml";
[opening mlProject.sml]
datatype 'a BT = bTree of 'a * 'a BT * 'a BT | empty
datatype X = A | B | C | D | E | F | G | H
val preOrder = fn : 'a BT -> 'a list
val inOrder = fn : 'a BT -> 'a list
val postOrder = fn : 'a BT -> 'a list
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
val printInt = fn : int -> unit
[autoloading]
[autoloading done]
val printReal = fn : real -> unit
val printX = fn : X -> unit
val tab = fn : int -> unit
val dash = fn : int -> unit
val displayNode = fn : 'a * int * ('a -> 'b) -> unit
val displayTreeIndent = fn : 'a BT * int * ('a -> 'b) -> unit
val displayTree = fn : 'a BT * ('a -> 'b) -> unit
val t1 = bTree (1,bTree (2,bTree #,bTree #),bTree (5,bTree #,bTree #))
  : int BT
val t2 = bTree (A,bTree (B,bTree #,bTree #),bTree (C,bTree #,bTree #)) : X BT
val t3 = bTree (1.22,bTree (2.33,empty,empty),bTree (3.44,empty,empty))
  : real BT
val t4 = bTree ("A",bTree ("B",bTree #,bTree #),bTree ("I",bTree #,empty))
  : string BT
val it = () : unit
- 
- 
%%% BEGIN RUNS %%%
%%%
%%% Test Tree "t1"
%%% val t1 = bTree(1,
%%%        bTree(2,bTree(3,empty, empty), bTree(4,empty, empty)),
%%%        bTree(5,bTree(6,empty, empty),bTree(7,empty, empty)));
- preOrder(t1);
val it = [1,2,3,4,5,6,7] : int list
- inOrder(t1);
val it = [3,2,4,1,6,5,7] : int list
- postOrder(t1);
val it = [3,4,2,6,7,5,1] : int list
- 
- displayTree(t1, printInt);
  1
    2
      3
      4
    5
      6
      7
val it = () : unit
- 
- 
%%% Test Tree "t2"
%%% val t2 = bTree(A,
%%%        bTree(B,bTree(D,empty, empty), bTree(E,empty, empty)),
%%%        bTree(C,bTree(F,empty, empty),bTree(G,empty, empty)));
- preOrder(t2);
val it = [A,B,D,E,C,F,G] : X list
- inOrder(t2);
val it = [D,B,E,A,F,C,G] : X list
- postOrder(t2);
val it = [D,E,B,F,G,C,A] : X list
- 
- displayTree(t2, printX);
  A
    B
      D
      E
    C
      F
      G
val it = () : unit
- 
- 
%%% Test Tree "t3"
%%% val t3 = bTree(1.22, 
%%%        bTree(2.33,empty, empty), bTree(3.44,empty,empty));
- preOrder(t3);
val it = [1.22,2.33,3.44] : real list
- inOrder(t3);
val it = [2.33,1.22,3.44] : real list
- postOrder(t3);
val it = [2.33,3.44,1.22] : real list
- 
- displayTree(t3, printReal);
  1.22
    2.33
    3.44
val it = () : unit
- 
- 
- 
%%% Test Tree "t4"
%%% val t4 = bTree("A",
%%%        bTree("B",
%%%                  bTree("C",bTree("E",empty,empty), empty),
%%%                  bTree("D",
%%%                        bTree("F",empty,empty),
%%%                        bTree("G",bTree("H",empty,empty), empty))),
%%%        bTree("I",
%%%                  bTree("J",empty, bTree("K",
%%%                     bTree("L",empty, empty),
%%%                     bTree("M",empty, empty))),
%%%                  empty));
- preOrder(t4);
val it = ["A","B","C","E","D","F","G","H","I","J","K","L","M"] : string list
- inOrder(t4);
val it = ["E","C","B","F","D","H","G","A","J","L","K","M","I"] : string list
- postOrder(t4);
val it = ["E","C","F","H","G","D","B","L","M","K","J","I","A"] : string list
- 
- displayTree(t4, print);
  A
    B
      C
        E
        -
      D
        F
        G
          H
          -
    I
      J
        -
        K
          L
          M
      -
val it = () : unit
- 
%%% END RUN %%%